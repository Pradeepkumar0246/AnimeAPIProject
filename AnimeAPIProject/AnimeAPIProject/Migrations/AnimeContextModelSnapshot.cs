// <auto-generated />
using System;
using AnimeAPIProject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnimeAPIProject.Migrations
{
    [DbContext(typeof(AnimeContext))]
    partial class AnimeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimeAPIProject.Models.Anime", b =>
                {
                    b.Property<int>("Anime_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Anime_Id"));

                    b.Property<string>("Anime_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Anime_Episodes")
                        .HasColumnType("int");

                    b.Property<string>("Anime_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Anime_Release_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Anime_Seasons")
                        .HasColumnType("int");

                    b.Property<int>("Studio_Id")
                        .HasColumnType("int");

                    b.HasKey("Anime_Id");

                    b.HasIndex("Studio_Id");

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("AnimeAPIProject.Models.Genre", b =>
                {
                    b.Property<int>("Genre_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Genre_Id"));

                    b.Property<string>("Genre_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Genre_Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("AnimeAPIProject.Models.Studio", b =>
                {
                    b.Property<int>("Studio_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Studio_Id"));

                    b.Property<string>("Studio_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Studio_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Studio_Year")
                        .HasColumnType("int");

                    b.HasKey("Studio_Id");

                    b.ToTable("Studios");
                });

            modelBuilder.Entity("AnimeAPIProject.Models.Users", b =>
                {
                    b.Property<int>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AnimeGenre", b =>
                {
                    b.Property<int>("AnimesAnime_Id")
                        .HasColumnType("int");

                    b.Property<int>("GenresGenre_Id")
                        .HasColumnType("int");

                    b.HasKey("AnimesAnime_Id", "GenresGenre_Id");

                    b.HasIndex("GenresGenre_Id");

                    b.ToTable("AnimeGenres", (string)null);
                });

            modelBuilder.Entity("AnimeUsers", b =>
                {
                    b.Property<int>("UsersUser_Id")
                        .HasColumnType("int");

                    b.Property<int>("WatchedAnimesAnime_Id")
                        .HasColumnType("int");

                    b.HasKey("UsersUser_Id", "WatchedAnimesAnime_Id");

                    b.HasIndex("WatchedAnimesAnime_Id");

                    b.ToTable("UserWatchedAnimes", (string)null);
                });

            modelBuilder.Entity("AnimeAPIProject.Models.Anime", b =>
                {
                    b.HasOne("AnimeAPIProject.Models.Studio", "Studio")
                        .WithMany("Animes")
                        .HasForeignKey("Studio_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("AnimeGenre", b =>
                {
                    b.HasOne("AnimeAPIProject.Models.Anime", null)
                        .WithMany()
                        .HasForeignKey("AnimesAnime_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeAPIProject.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenre_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnimeUsers", b =>
                {
                    b.HasOne("AnimeAPIProject.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UsersUser_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeAPIProject.Models.Anime", null)
                        .WithMany()
                        .HasForeignKey("WatchedAnimesAnime_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnimeAPIProject.Models.Studio", b =>
                {
                    b.Navigation("Animes");
                });
#pragma warning restore 612, 618
        }
    }
}
